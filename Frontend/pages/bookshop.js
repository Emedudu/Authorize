import Book from "@/components/Book";
import { useBooks } from "@/lib/hooks";
import Head from "next/head";
import { RiArrowDropDownLine } from "react-icons/ri";
import { BsSearch } from "react-icons/bs";
import { BiLoaderCircle } from "react-icons/bi";
import { useEffect, useState } from "react";
import { getBooks } from "@/lib/firebase";
import { useForm } from "react-hook-form";

export default function Home() {
  const allFields = ["name", "author", "cid", "tag"];

  const [books, setBooks] = useState([]);
  const [searchField, setSearchField] = useState(allFields[0]);
  const [searchLoading, setSearchLoading] = useState(false);
  // const books = useBooks();

  const {
    handleSubmit,
    register,
    reset,
    formState: { errors },
  } = useForm();

  const fetchBooks = async (values) => {
    const { searchValue } = values;
    if (!searchValue) {
      toast.error("Search should not be empty");
      return;
    }
    setSearchLoading(true);
    try {
      const searchedBooks = await getBooks(
        [searchField, "==", searchValue],
        20
      );
      setBooks(searchedBooks);
    } catch (error) {
      toast.error("Error! Could not search");
    }
    setSearchLoading(false);
  };

  useEffect(() => {
    getBooks([], 20).then((res) => setBooks(res));
  }, []);

  return (
    <>
      <Head>
        <title>AUTHORize</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="p-4">
        <div>
          <form onSubmit={handleSubmit(fetchBooks)}>
            <div class="flex w-5/6 mx-auto">
              <label
                for="search-dropdown"
                class="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white"
              >
                Your Email
              </label>
              <button
                id="dropdown-button"
                data-dropdown-toggle="dropdown"
                class="capitalize flex-shrink-0 z-10 inline-flex items-center py-2.5 px-4 text-sm font-medium text-center text-gray-900 bg-gray-100 border border-gray-300 rounded-l-lg hover:bg-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100"
                type="button"
              >
                {`${searchField}`}
                <RiArrowDropDownLine size={20} />
              </button>
              <div
                id="dropdown"
                class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700"
              >
                <ul
                  class="py-2 text-sm text-gray-700 dark:text-gray-200"
                  aria-labelledby="dropdown-button"
                >
                  <li>
                    {allFields.map((label, i) => (
                      <button
                        type="button"
                        class="inline-flex w-full px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white capitalize"
                        onClick={() => setSearchField(label)}
                        key={i}
                      >
                        {`${label}`}
                      </button>
                    ))}
                  </li>
                </ul>
              </div>
              <div class="relative w-full">
                <input
                  type="search"
                  id="search-dropdown"
                  class="block p-2.5 w-full z-20 text-sm text-gray-900 bg-gray-50 rounded-r-lg border-l-gray-50 border-l-2 border border-gray-300 focus:ring-orange-300 focus:border-orange-300 "
                  placeholder="Search Books..."
                  {...register("searchValue")}
                  required
                />
                <button
                  type="submit"
                  class="absolute top-0 right-0 p-2.5 text-sm font-medium text-white bg-orange-500 rounded-r-lg border border-orange-700 hover:bg-orange-600 focus:ring-4 focus:outline-none focus:ring-orange-30"
                  disabled={searchLoading}
                >
                  {searchLoading ? (
                    <BiLoaderCircle
                      className="animate-spin"
                      color="white"
                      size={20}
                    />
                  ) : (
                    <BsSearch size={20} />
                  )}

                  <span class="sr-only">Search</span>
                </button>
              </div>
            </div>
          </form>
        </div>
        <div className="mt-3">
          {books.length ? (
            books.map((obj, i) => <Book details={obj} key={i} />)
          ) : (
            <p className="font-bold text-orange-700 text-5xl text-center mt-20">
              No book is here ðŸ˜¥
            </p>
          )}
        </div>
      </main>
    </>
  );
}
